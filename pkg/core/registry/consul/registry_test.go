package consul

import (
	"context"
	"testing"

	"github.com/agrea/ptr"
	"github.com/hashicorp/consul/api"
	"github.com/insidieux/pinchy/pkg/core"
	"github.com/pkg/errors"
	"github.com/stretchr/testify/mock"
	"github.com/stretchr/testify/suite"
)

// --- Tests ---

func TestNewRegistry(t *testing.T) {
	suite.Run(t, new(newRegistryTestSuite))
}

func TestRegistry_Fetch(t *testing.T) {
	suite.Run(t, new(registryFetchTestSuite))
}

func TestRegistry_Deregister(t *testing.T) {
	suite.Run(t, new(registryDeregisterTestSuite))
}

func TestRegistry_Register(t *testing.T) {
	suite.Run(t, new(registryRegisterTestSuite))
}

// --- Suites ---

type newRegistryTestSuite struct {
	suite.Suite
}

func (s *newRegistryTestSuite) TestNewSource() {
	got := NewRegistry(nil)
	s.Implements((*core.Registry)(nil), got)
	s.Equal(&Registry{nil}, got)
}

type registryFetchTestSuite struct {
	suite.Suite
	agent    *MockAgent
	registry *Registry
}

func (s *registryFetchTestSuite) SetupTest() {
	s.agent = new(MockAgent)
	s.registry = NewRegistry(s.agent)
}

func (s *registryFetchTestSuite) TestErrorAgentFetch() {
	s.agent.On(`Services`).Return(nil, errors.New(`expected error`))

	s.registry.agent = s.agent
	services, err := s.registry.Fetch(context.Background())
	s.Nil(services)
	s.EqualError(err, `failed to fetch registered services info: expected error`)
}

func (s *registryFetchTestSuite) TestSuccess() {
	s.agent.On(`Services`).Return(map[string]*api.AgentService{
		`name`: {
			ID:      `id`,
			Service: `name`,
			Tags:    []string{`tags`},
			Meta:    map[string]string{`key`: `value`},
			Port:    80,
			Address: `127.0.0.1`,
		},
	}, nil)

	fetchedServices, err := s.registry.Fetch(context.Background())

	expectedTags := []string{`tags`}
	expectedMeta := map[string]string{`key`: `value`}
	s.NoError(err)
	s.Equal(core.Services{
		&core.Service{
			Name:    `name`,
			Address: `127.0.0.1`,
			ID:      ptr.String(`id`),
			Tags:    &expectedTags,
			Meta:    &expectedMeta,
			Port:    ptr.Int(80),
		},
	}, fetchedServices)

}

type registryDeregisterTestSuite struct {
	suite.Suite
	agent    *MockAgent
	registry *Registry
}

func (s *registryDeregisterTestSuite) SetupTest() {
	s.agent = new(MockAgent)
	s.registry = NewRegistry(s.agent)
}

func (s *registryDeregisterTestSuite) TestErrorAgentDeregister() {
	s.agent.On(`ServiceDeregister`, `service`).Return(errors.New(`expected error`))

	err := s.registry.Deregister(context.Background(), `service`)
	s.EqualError(err, `failed deregister service by service id "service": expected error`)
}

func (s *registryDeregisterTestSuite) TestSuccess() {
	s.agent.On(`ServiceDeregister`, `service`).Return(nil)

	err := s.registry.Deregister(context.Background(), `service`)
	s.NoError(err)
}

type registryRegisterTestSuite struct {
	suite.Suite
	agent    *MockAgent
	registry *Registry
}

func (s *registryRegisterTestSuite) SetupTest() {
	s.agent = new(MockAgent)
	s.registry = NewRegistry(s.agent)
}

func (s *registryRegisterTestSuite) TestErrorServiceValidation() {
	err := s.registry.Register(context.Background(), &core.Service{
		Name: `name`,
	})
	s.Error(err)
	s.Contains(err.Error(), `service has validation error before registration`)
}

func (s *registryRegisterTestSuite) TestErrorAgentRegister() {
	s.agent.On(`ServiceRegister`, mock.Anything).Return(errors.New(`expected error`))

	err := s.registry.Register(context.Background(), &core.Service{
		Name:    `name`,
		Address: `127.0.0.1`,
	})
	s.EqualError(err, `failed register service by service id "name": expected error`)
}

func (s *registryRegisterTestSuite) TestSuccess() {
	s.agent.On(`ServiceRegister`, mock.Anything).Return(nil)

	expectedTags := []string{`tags`}
	expectedMeta := map[string]string{`key`: `value`}
	err := s.registry.Register(context.Background(), &core.Service{
		Name:    `name`,
		Address: `127.0.0.1`,
		ID:      ptr.String(`id`),
		Tags:    &expectedTags,
		Meta:    &expectedMeta,
		Port:    ptr.Int(80),
	})
	s.NoError(err)
}

// --- Mocks ---

// MockAgent is an autogenerated mock type for the Agent type
type MockAgent struct {
	mock.Mock
}

// ServiceDeregister provides a mock function with given fields: serviceID
func (_m *MockAgent) ServiceDeregister(serviceID string) error {
	ret := _m.Called(serviceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(serviceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServiceRegister provides a mock function with given fields: service
func (_m *MockAgent) ServiceRegister(service *api.AgentServiceRegistration) error {
	ret := _m.Called(service)

	var r0 error
	if rf, ok := ret.Get(0).(func(*api.AgentServiceRegistration) error); ok {
		r0 = rf(service)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Services provides a mock function with given fields:
func (_m *MockAgent) Services() (map[string]*api.AgentService, error) {
	ret := _m.Called()

	var r0 map[string]*api.AgentService
	if rf, ok := ret.Get(0).(func() map[string]*api.AgentService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*api.AgentService)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
